Java Introduction
- Java is an object oriented programming language developed by James Gosling at Sun Microsystems
- Sun microsystems is acquired by Oracle Corp in 2010

Object Oriented Concepts/ features
- Objects - a real time entity which has identity, state and behavior
- Classes - collection of data members and methods
- Abstraction
- Encapsulation
- Inheritance
- Polymorphism

Java Features:
- simple
- object-oriented
- robust
- platform independent
- interpreted
- portable
- secure
- multithreaded
- dynamic
- distributed

1. Simple: Java is considered simple because it contains a large number of APIs (Application Programming Interfaces), also known as libraries. Libraries are pre-defined, existing code that developers can utilise.
    ◦ Example: To sort elements within an array, writing the code in C or C++ might require around 10 to 15 lines of code. In Java, this task can be achieved in just one line of code by using the pre-defined Arrays class, which contains a sort method; you simply pass the array name to this method.
2. Object-Oriented: Java is an object-oriented programming language because it fully supports all Object-Oriented Programming (OOP) features, including objects, classes, abstraction, encapsulation, inheritance, and polymorphism.
    ◦ Examples:
        ▪ An object is defined as a real-time entity possessing identity, state, and behaviour.
        ▪ A class is a collection of data members and methods. To access the members of a class, an object must be created.
3. Robust: Robust applications are designed to provide a proper message to the user about what went wrong when an abnormal situation occurs, rather than automatically closing down. Java enables the development of robust applications through exception handling, a mechanism that avoids abnormal termination of the application. An exception is a runtime error.
    ◦ Example: If you are typing a document in Microsoft Word and attempt to print it without the printer being connected, a robust application will display a message such as "printer not connected" instead of the entire Microsoft Word application closing.
4. Platform Independent: Platform refers to the operating system. Platform independent means operating system independent, implying that a Java program written on one operating system (e.g., Windows) can be taken and run on other operating systems like Linux or Mac without any modification. This is often summarised as "write once, run anywhere".
    ◦ Key Concept: The core element that makes Java platform independent is bytecodes.
    ◦ Process/Example:
        1. A Java program, which is a collection of classes (e.g., X.java containing classes A, B, C), is written as source code.
        2. The javac command (Java compiler) is used at the command prompt to compile the source code. This process creates .class files (bytecodes) for each class (e.g., A.class, B.class, C.class). These .class files are platform independent.
        3. These bytecodes can then be executed on any operating system.
        4. To run a Java program, at least one class must contain a main method, which serves as the program's entry point.
        5. The java command is used to run only the .class files that contain a main method.
        6. For example:
            • java X would result in an error ("no class definition found") because X is the source file, not a .class file.
            • java C would result in an error ("no main method found") if class C has a .class file but lacks a main method.
            • java A or java B would run the program from the respective class's main method, provided they exist and contain a main method.
5. Interpreted: The javac command functions as a compiler, converting Java source code into bytecode at once (meaning it will not create bytecode if errors are present). The java command acts as an interpreter, which executes the bytecode line by line.
    ◦ Example: The compiler's role is to convert the Java source code file into bytecode simultaneously. The interpreter's role is to execute the generated bytecode incrementally, line by line.
6. Portable: Java is portable because the size of its respective data types remains consistent across all platforms (operating systems).
    ◦ Example: In C/C++, the size of an integer data type can vary (e.g., 2 bytes on a 32-bit operating system and 4 bytes on a 64-bit operating system), potentially leading to memory issues when shifting programs between different systems. In Java, the size of an integer data type is consistently 4 bytes on both 32-bit and 64-bit operating systems, ensuring consistent behaviour across platforms.
7. Secure: Java is considered secure primarily because it does not support pointers. A pointer is a variable that contains the memory address of another variable.
    ◦ Example: In C/C++, the use of pointers allows direct access to, and even corruption of, any memory space. This capability is why C and C++ are often utilised for developing virus or antivirus applications. Java, however, is primarily designed for business applications rather than system programming, and therefore removes pointers to enhance security, preventing direct memory manipulation that could compromise system integrity.
8. Multi-threaded: Multitasking refers to performing multiple tasks simultaneously (e.g., having Notepad, a meeting, and a browser open simultaneously). Threads are lightweight processes that are part of a single larger task and execute concurrently within that task. Multithreading is specifically used to increase the performance of an application.
    ◦ Examples:
        ▪ In Gmail, opening multiple "compose" windows exemplifies threads. While one attachment is uploading, you can simultaneously attach another or type the subject and body of the message. Gmail itself is the main "task," and the compose windows and attachment processes are "threads" within it.
        ▪ In a GoToMeeting, separate actions like showing the screen, recording the class, and speaking are all individual threads that constitute parts of the single GoToMeeting process.
9. Dynamic: In Java, memory allocation for arrays and objects occurs during runtime. Additionally, Java incorporates automatic garbage collection, meaning that the deallocation of memory is automatically handled by Java itself, without requiring the programmer to manually manage it.
    ◦ Example: When memory is required for objects or arrays, Java manages this allocation dynamically as the program runs. Subsequently, when this memory is no longer needed, Java's garbage collector automatically reclaims it, ensuring efficient memory usage.
10. Distributed: Distributed applications are used for the primary purpose of exchanging data or facilitating interaction from one application to another application.
    ◦ Example: When using the Amazon website and proceeding to the payment process, if you select net banking and choose a bank like Citibank, Amazon will redirect you to the Citibank website to enter your credentials. This demonstrates the communication and data exchange between the Amazon application and the Citibank application, making them a type of distributed application. Most payment processes encountered on websites are common examples of distributed applications.

